// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma schema file

// Enum for user roles
enum UserRole {
  ADMIN
  MEMBER
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String // Store hashed passwords only!
  name        String?
  role        UserRole @default(MEMBER) // Default to MEMBER role
  posts       Post[] // One-to-many relationship with Post
  events      Event[] // One-to-many relationship with Event
  ranking     Int? // Optional ranking for members
  designation String? // Optional designation for members
  about       String?  @db.Text // Optional about section for members
  imageUrl    String? // Optional image URL for members
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(false)
  title       String
  imageUrl    String
  description String   @db.Text
  category    String?
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    Int?
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String    @db.Text
  location    String
  startDate   DateTime
  endDate     DateTime?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  organizer   User?     @relation(fields: [organizerId], references: [id]) // Event organizer (admin or member)
  organizerId Int?
}

model Image {
  id         Int      @id @default(autoincrement())
  imageUrl   String
  rank       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorName String?
  category   String?
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String   @db.Text
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
}
